datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String?
  email            String            @unique
  emailVerified    DateTime?
  image            String?
  role             UserRoles @default(USER)
  accounts         Account[]
  sessions         Session[]
  // Optional for WebAuthn support
  profile          Boolean?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

enum UserRoles {
  USER
  ADMIN
}

model Account {
  userId            String  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  credentialID         String  @unique
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
}
